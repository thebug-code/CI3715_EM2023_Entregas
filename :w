from flask import current_app, request, json

from SAGTMA.utils.decorators import login_required, requires_roles

from SAGTMA.models import (
    User,
    Project,
    Client,
    Vehicle,
    Department,
    Role,
    ProjectDetail,
    MeasureUnit,
    ActionPlan,
    Activity,
    db,
)


@current_app.route("/api/v1/users")
@requires_roles("Administrador")
def api_users():
    # SELECT * FROM user
    stmt = db.select(User)

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    user_id = request.args.get("id")
    if user_id:
        stmt = stmt.where(User.id == user_id)

    # Consulta los usuarios requeridos
    result = db.session.execute(stmt).fetchall()
    users = [
        {
            "id": user.id,
            "id_number": user.id_number,
            "username": user.username,
            "names": user.names,
            "surnames": user.surnames,
            "role_id": user.role.id,
        }
        for user, in result
    ]

    # Consulta los roles
    stmt = db.select(Role).where(Role.id != 1)
    result = db.session.execute(stmt).fetchall()
    roles = [{"id": r.id, "name": r.name} for r, in result]

    return {"users": users, "roles": roles}


@current_app.route("/api/v1/projects")
@requires_roles("Gerente de Operaciones")
def api_projects():
    stmt = db.select(Project)

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    project_id = request.args.get("id")
    if project_id:
        stmt = stmt.where(Project.id == project_id)

    # Consulta los proyectos requeridos
    result = db.session.execute(stmt).fetchall()
    projects = [
        {
            "id": project.id,
            "description": project.description,
            "start_date": project.start_date.strftime("%Y-%m-%d"),
            "deadline": project.end_date.strftime("%Y-%m-%d"),
        }
        for project, in result
    ]

    return projects


@current_app.route("/api/v1/clients")
@requires_roles("Analista de Operaciones")
def api_clients():
    stmt = db.select(Client)

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    client_id = request.args.get("id")
    if client_id:
        stmt = stmt.where(Client.id == client_id)

    # Consulta los clientes requeridos
    result = db.session.execute(stmt).fetchall()
    clients = [
        {
            "id": client.id,
            "id_number": client.id_number,
            "names": client.names,
            "surnames": client.surnames,
            "birthdate": client.birthdate.strftime("%Y-%m-%d"),
            "phone_number": client.phone_number,
            "email": client.email,
            "address": client.address,
        }
        for client, in result
    ]

    return clients


@current_app.route("/api/v1/vehicles")
@requires_roles("Analista de Operaciones")
def api_vehicles():
    stmt = db.select(Vehicle)

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    vehicle_id = request.args.get("id")
    if vehicle_id:
        stmt = stmt.where(Vehicle.id == vehicle_id)

    # Consulta los clientes requeridos
    result = db.session.execute(stmt).fetchall()
    vehicles = [
        {
            "license_plate": vehicle.license_plate,
            "brand": vehicle.brand,
            "model": vehicle.model,
            "year": vehicle.year,
            "body_number": vehicle.body_number,
            "engine_number": vehicle.engine_number,
            "color": vehicle.color,
            "problem": vehicle.problem,
        }
        for vehicle, in result
    ]

    return vehicles


@current_app.route("/api/v1/departments")
@requires_roles("Administrador")
def api_departments():
    stmt = db.select(Department)

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    dept_id = request.args.get("id")
    if dept_id:
        stmt = stmt.where(Department.id == dept_id)

    # Consulta los departamentos requeridos
    result = db.session.execute(stmt).fetchall()
    depts = [
        {
            "id": dept.id,
            "description": dept.description,
        }
        for dept, in result
    ]

    return depts


@current_app.route("/api/v1/project-details-dropdown-data")
@requires_roles("Gerente de Operaciones")
def get_project_details_dropdown_data():
    # SELECT * FROM user
    stmt = db.select(User)
    result = db.session.execute(stmt).fetchall()
    users = [
        {
            "id": u.id,
            "names": u.names,
            "surnames": u.surnames,
            "id_number": u.id_number
        }
        for u, in result
    ]

    # SELECT * FROM department
    stmt = db.select(Department)
    result = db.session.execute(stmt).fetchall()
    departments = [
        {
            "id": d.id,
            "description": d.description
        } 
        for d, in result
    ]

    # SELECT * FROM vehicle
    stmt = db.select(Vehicle)
    result = db.session.execute(stmt).fetchall()
    vehicles = [
        {
            "id": v.id,
            "license_plate": v.license_plate,
            "brand": v.brand,
            "id_number": v.owner.id_number,
            "names": v.owner.names,
            "surnames": v.owner.surnames,
            "problem": v.problem,
        }
        for v, in result
    ]

    data = {"users": users, "departments": departments, "vehicles": vehicles}

    return data


@current_app.route("/api/v1/project-details")
@requires_roles("Gerente de Operaciones")
def api_project_details():
    # SELECT * FROM project_detail
    stmt = db.select(ProjectDetail)

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    project_detail_id = request.args.get("id")
    if project_detail_id:
        stmt = stmt.where(ProjectDetail.id == project_detail_id)

    # Consulta los detalles de proyecto requeridos
    result = db.session.execute(stmt).fetchall()
    project_details = [
        {
            "id": pd.id,
            "project_id": pd.project.id,
            "manager_id": pd.manager.id,
            "department_id": pd.department.id,
            "vehicle_id": pd.vehicle.id,
            "solution": pd.solution,
            "cost": pd.cost,
            "observations": pd.observations,
        }
        for pd, in result
    ]

    # Obtiene los datos del dropdown
    data = get_project_details_dropdown_data()

    return {"project_details": project_details, "dropdown_data": data}


@current_app.route("/api/v1/measurement-units/")
@requires_roles("Administrador")
def api_measure_units():
    stmt = db.select(MeasureUnit)

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    measure_unit_id = request.args.get("id")
    if measure_unit_id:
        stmt = stmt.where(MeasureUnit.id == measure_unit_id)

    # Consulta las unidades de medida requeridas
    result = db.session.execute(stmt).fetchall()
    measure_units = [
        {
            "id": uom.id,
            "dimension": uom.dimension,
            "unit": uom.unit,
        }
        for uom, in result
    ]

    return measure_units


@current_app.route("/api/v1/action-plans-dropdown-data")
@requires_roles("Gerente de Operaciones")
def get_action_plans_dropdown_data():
    # SELECT * FROM USER
    stmt = db.select(User)
    result = db.session.execute(stmt).fetchall()

    users = [
        {
            "id": u.id,
            "names": u.names,
            "surnames": u.surnames
        } 
        for u, in result
    ]

    # SELECT * FROM ActionPlan
    stmt = db.select(ActionPlan)
    result = db.session.execute(stmt).fetchall()
    actions = [
        {
            "id": a.id,
            "description": a.action
        }
        for a, in result
    ]

    return {"users": users, "actions": actions}


@current_app.route("/api/v1/action-plans")
@requires_roles("Gerente de Operaciones")
def api_action_plans():
    def api_action_plans():
    # SELECT * FROM ActionPlan JOIN Activity ON ActionPlan.activity_id = Activity.id
    stmt = (
        db.select(ActionPlan, Activity)
        .join(Activity, ActionPlan.activity_id == Activity.id)
    )

    # Obtiene los parámetros de la request para filtrar por id
    # y filtra de ser necesario
    action_plan_id = request.args.get("action_id")
    activity_id = request.args.get("activity_id")
    
    if action_plan_id:
        stmt = stmt.where(ActionPlan.id == action_plan_id)

    if activity_id:
        stmt = stmt.where(Activity.id == activity_id)

    # Consulta los planes de acción y actividades requeridas
    results = db.session.execute(stmt).fetchall()

    action_plans = {}
    for result in results:
        if result.ActionPlan.id not in action_plans:
            action_plans[result.ActionPlan.id] = {
                "id": result.ActionPlan.id,
                "action": result.ActionPlan.action,
                "user_id": result.ActionPlan.user_id,
                "user": f"{result.ActionPlan.user.names} {result.ActionPlan.user.surnames}",
                "start_date": result.ActionPlan.start_date,
                "end_date": result.ActionPlan.end_date,
                "status": result.ActionPlan.status,
                "observations": result.ActionPlan.observations,
                "activities": []
            }
        action_plans[result.ActionPlan.id]["activities"].append({
            "id": result.Activity.id,
            "description": result.Activity.description,
            "status": result.Activity.status
        })

    return jsonify(list(action_plans.values()))
