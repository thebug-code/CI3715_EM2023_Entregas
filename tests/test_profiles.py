from tests import BaseTestClass

# Generated by Selenium IDE
from selenium.webdriver.common.by import By
from selenium.webdriver.support import expected_conditions
from selenium.webdriver.support.wait import WebDriverWait


class TestProfiles(BaseTestClass):
    def _login_admin(self):
        self.driver.get("http://localhost:5001/login/")

        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys("admin")
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys("Admin123.")
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary").click()

    def _register_user(
        self,
        username: str,
        password: str,
        confirm_password: str,
        names: str,
        surnames: str,
    ):
        self.driver.find_element(By.CSS_SELECTOR, ".btn-primary:nth-child(4)").click()
        WebDriverWait(self.driver, 1).until(
            expected_conditions.visibility_of_element_located(
                (By.CSS_SELECTOR, "#addModal .modal-header")
            )
        )
        self.driver.find_element(By.ID, "username").click()
        self.driver.find_element(By.ID, "username").send_keys(username)
        self.driver.find_element(By.ID, "password").click()
        self.driver.find_element(By.ID, "password").send_keys(password)
        self.driver.find_element(By.ID, "confirm-password").click()
        self.driver.find_element(By.ID, "confirm-password").send_keys(confirm_password)
        self.driver.find_element(By.ID, "names").click()
        self.driver.find_element(By.ID, "names").send_keys(names)
        self.driver.find_element(By.ID, "surnames").click()
        self.driver.find_element(By.ID, "surnames").send_keys(surnames)
        self.driver.find_element(
            By.CSS_SELECTOR, ".modal-footer:nth-child(7) > .btn-primary"
        ).click()
        self.driver.find_element(By.CSS_SELECTOR, ".toast-body").click()

    def test_register_invalid_password(self):
        """Testea registros de usuarios con contraseñas inválidas.

        Testea los casos de contraseñas con las siguientes características:
         - Menos de 6 caracteres.
         - Más de 20 caracteres.
         - Sin número.
         - Sin mayúsculas.
         - Sin minúsculas.
         - Sin caracteres especiales.
        """

        def _test_register_invalid_password(password: str, message: str):
            self._register_user("test1", password, password, "Alicia", "Maravilla")
            WebDriverWait(self.driver, 1).until(
                expected_conditions.visibility_of_element_located(
                    (By.CSS_SELECTOR, ".toast-body")
                )
            )

            self.assertEqual(
                self.driver.find_element(By.CSS_SELECTOR, ".toast-body").text, message
            )

            self.assertNotIn(
                "test1",
                self.driver.find_element(By.CSS_SELECTOR, ".table").text,
            )

        self._login_admin()

        # Menos de 6 caracteres
        _test_register_invalid_password(
            "Al1", "La contraseña debe tener entre 6 y 20 caracteres."
        )

        # Más de 20 caracteres
        _test_register_invalid_password(
            "AliceTheBest123_4567.", "La contraseña debe tener entre 6 y 20 caracteres."
        )

        # Sin número
        _test_register_invalid_password(
            "Alice.", "La contraseña debe contener al menos un número."
        )

        # Sin mayúsculas
        _test_register_invalid_password(
            "alice123.",
            "La contraseña debe contener al menos una mayúscula y una minúscula",
        )

        # Sin minúsculas
        _test_register_invalid_password(
            "ALICE123.",
            "La contraseña debe contener al menos una mayúscula y una minúscula",
        )

        # Sin caracteres especiales
        _test_register_invalid_password(
            "Alice123", "La contraseña debe contener al menos un caracter especial."
        )

    def test_register_valid_password(self):
        """Testea la creación de usuarios con la contraseñas válidas."""

        def _test_register_valid_password(id: int, password_to_test: str):
            self._register_user(
                f"test{id}",
                password_to_test,
                password_to_test,
                f"Alicia{id}",
                f"Maravilla{id}",
            )
            WebDriverWait(self.driver, 1).until(
                expected_conditions.visibility_of_element_located(
                    (By.CSS_SELECTOR, ".toast-body")
                )
            )
            self.assertEqual(
                self.driver.find_element(By.CSS_SELECTOR, ".toast-body").text,
                "Usuario registrado exitosamente",
            )
            self.assertIn(
                f"test{id}", self.driver.find_element(By.CSS_SELECTOR, ".table").text
            )

        self._login_admin()

        # Contraseña válida de 6 caracteres
        _test_register_valid_password(1, "Alice1.")

        # Contraseña válida de 20 caracteres
        _test_register_valid_password(2, "AliceTheBest123_456.")

    def test_register_invalid_user(self):
        """Testea la creación de usuarios con nombre de usuario inválidos

        Un nombre de usuario es válido si:
        -Tiene al menos 3 caracteres y a lo sumo 20 caracteres
        -No tiene caracteres especiales distintos de '_' (guión bajo)
        -No comienza con un caracter numérico
        """
        

    def test_register_mismatched_password(self):
        """Testea la creación de usuarios cuando la contraseña y su
        verificacion no coinciden"""

        self._login_admin()

        self._register_user(
            "test1", "Alice123.", "Alice123", "Alicia", "Maravilla"
        )
        WebDriverWait(self.driver, 1).until(
            expected_conditions.visibility_of_element_located(
                (By.CSS_SELECTOR, ".toast-body")
            )
        )
        self.assertEqual(
            self.driver.find_element(By.CSS_SELECTOR, ".toast-body").text,
            "Las contraseñas ingresadas no coinciden",
        )
        self.assertNotIn(
            "test1", self.driver.find_element(By.CSS_SELECTOR, ".table").text
        )

#     # def test_register_user(username: str):
#     #     with self.assertRaises(users.InvalidUsernameError):
#     #         users.register_user(
#     #             username,
#     #             f"{username}@example.com",
#     #             "Hola123.",
#     #             "Hola123.",
#     #             Role.USER,
#     #         )

#     # # Con menos de 3 caracteres
#     # test_register_user("ka")

#     # # Con más de 20 caracteres
#     # test_register_user("John_Doe_The_Best_Username")

#     # # Con caracteres especiales
#     # test_register_user("val.")

#     # # Empieza con un número
#     # test_register_user("1user")

# def test_register_mismatched_password(self):
#     """Testea la creación de usuarios cuando la contraseña y su
#     verificacion no coinciden
#     """
#     # with self.assertRaises(users.PasswordMismatchError):
#     #     users.register_user(
#     #         "Alice", "Alice@example.com", "Alice123.", "Alice12.", Role.USER
#     #     )

# def test_register_duplicated_username(self):
#     """Testea la creación de usuarios con nombre de usuario o correo ya
#     registrados
#     """
#     # # Crea el usuario base
#     # users.register_user(
#     #     "Alice", "Alice@example.com", "Alice123.", "Alice123.", Role.USER
#     # )

#     # with self.assertRaises(users.AlreadyExistingUserError):
#     #     # Usuario ya registrado
#     #     users.register_user(
#     #         "Alice", "Alice_dup@example.com", "Alice123.", "Alice123.", Role.USER
#     #     )

#     # with self.assertRaises(users.AlreadyExistingUserError):
#     #     # Correo ya registrado
#     #     users.register_user(
#     #         "Alice_dup", "Alice@example.com", "Alice123.", "Alice123.", Role.USER
#     #     )

# def test_register_invalid_email(self):
#     """Se testea la creación de usuarios con correos inválidos"""

#     # def test_register_user(email: str):
#     #     with self.assertRaises(users.InvalidEmailError):
#     #         users.register_user(
#     #             "generic_user", email, "Hola123.", "Hola123.", Role.USER
#     #         )

#     # test_register_user("Aliceexample.com")
#     # test_register_user("Alice@examplecom")
#     # test_register_user("Alice@example.a")
#     # test_register_user("Alice@example.")
#     # test_register_user(".@example.")
#     # test_register_user(".@example.com")
