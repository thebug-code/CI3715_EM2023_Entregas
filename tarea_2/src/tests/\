import responses 

from auth.models.user import User

#def test_home(client):
#    response = client.get("/")
#    assert b"<title>Home</title>" in response.data


def test_passwords_do_not_match(client):
    response = client.post("/signup/", data={"username": "admeneses", "password": "testpassword", "confirmpassword": "Testpassword"}, follow_redirects=True)

    #with app.app_context():
    #    assert User.query.count() == 1
    #    assert User.query.first().email == "test@test.com"
    assert b"The passwords do not match" in response.data

def test_username_empty(client):
    response = client.post("/signup/", data={"username": "", "password": "testpassword", "confirmpassword": "Testpassword"}, follow_redirects=True)

    #with app.app_context():
    #    assert User.query.count() == 1
    #    assert User.query.first().email == "test@test.com"
    assert b"Username, Password or Confirm Password cannot be empty" in response.data

def test_password_empty(client):
    response = client.post("/signup/", data={"username": "", "password": "testpassword", "confirmpassword": "Testpassword"}, follow_redirects=True)

    #with app.app_context():
    #    assert User.query.count() == 1
    #    assert User.query.first().email == "test@test.com"
    assert b"Username, Password or Confirm Password cannot be empty" in response.data

def test_all_field_empty(client):
    response = client.post("/signup/", data={"username": "", "password": "", "confirmpassword": ""}, follow_redirects=True)

    #with app.app_context():
    #    assert User.query.count() == 1
    #    assert User.query.first().email == "test@test.com"
    assert b"Username, Password or Confirm Password cannot be empty" in response.data
#@responses.activate
#def test_age(client):
#    responses.add(
#        responses.GET,
#        "https://api.agify.io",
#        json={"age": 33, "count": 1049384, "name": "Anthony"},
#        status=200
#    )
#    client.post("/register", data={"email": "test@test.com", "password": "testpassword"})
#    client.post("/login", data={"email": "test@test.com", "password": "testpassword"})
#
#    response = client.post("/age", data={"name": "Anthony"})
#
#    assert b"You are 33 years old" in response.data
#
#def test_invalid_login(client):
#    client.post("/login", data={"email": "test@test.com", "password": "testpassword"})
#
#    response = client.get("/city")
#
#    assert response.status_code == 401
