from typing import Tuple

import bcrypt

from SAGTMA.models import Project, User, db
from SAGTMA.utils import events


# ========== Excepciones ==========
class CreateProjectError(ValueError):
    pass

class AlreadyExistingProjectError(CreateProjectError):
    pass

class InvalidDescripProjectError(CreateProjectError):
    pass

class InvalidProjectDate(CreateProjectError):
    pass

class MissingFieldError(CreateProjectError):
    pass

# ========== Validaciones ==========
def validate_descrip_project(project: str) -> bool:
    '''Lanza una excepción si la descripcion de un proyecto no es valida.

    Una descripcion de un proyecto es válida si:
      -Tiene al menos 10 caracteres y a lo sumo 200 caracteres
      -No tiene caracteres especiales distintos de '_' (guión bajo)
      -No comienza con un caracter numérico
    '''
    if len(description) < 10 or len(description) > 200:
            raise InvalidDescripProjectError('La descripcion del proyecto debe tener entre 10 y 200 caracteres.')

    if description[0].isdigit():
        raise InvalidDescripProjectError('La descripcion de un proyecto no puede comenzar con un número.')

    for char in description:
        if not char.isalnum() and char != '_':
            raise InvalidDescripProjectError('La descripcion de un proyeto no puede contener caracteres especiales.')

# Falta tipo de parametro
def validate_date(start_date, deadline) -> bool:
    '''Lanza una excepción si la fecha de inicio de un proyecto es despues que su fecha de cierre'''

    if start_date > deadline:
        raise InvalidProjectDate('La contraseña debe tener entre 6 y 20 caracteres.')

# ========== Anadidura ==========
# Falta tipo de parametro
def create_proyect(
    description: str,
    start_date,
    deadline
):
    '''Crea y anade un usuario en la base de datos.

    Lanza una excepción CreateProyectError si hubo algún error.
    '''
    if not all([description, start_date, deadline]):
        raise MissingFieldError('Todos los campos son obliglatorios')

    # Verifica si ya existe un proyecto con la mima descripcion
    stmt = db.select(Project).where(Project.description == description)
    if db.session.execute(stmt).first():
        raise AlreadyExistingProjectError('El proyecto ya existe')

    # Chequea si los campos ingresados son válidos
    validate_descrip_project(description)
    validate_date(start_date, deadline)

    # Crea el usuario en la base de datos
    new_project = User(description, start_date, deadline, hash_password(password), query_role[0])
    db.session.add(new_user)

    # Registra el evento en la base de datos
    events.add_register(new_user.username)

def hash_password(password: str):
    '''Crea un hash de la contraseña ingresada.'''
    return bcrypt.hashpw(str.encode(password), bcrypt.gensalt())

# ========== Inicio de sesión ==========
def log_user(username: str, password: str) -> Tuple[int, str]:
    '''Inicia la sesión de un usuario retorna su id.

    Lanza una excepción AuthenticationError si hubo algún error.

    Retorna una tupla con el id del usuario y el nombre de su rol
    '''
    if not username or not password:
        raise MissingFieldError('Todos los campos son obligatorios')

    stmt = db.select(User).where(User.username == username)
    query_user = db.session.execute(stmt).first()

    if not query_user:
        raise UserNotFoundError('El usuario ingresado no existe')
    elif not check_password(password, query_user[0].password):
        raise IncorrectPasswordError('Las credenciales ingresadas son incorrectas')

    return (query_user[0].id, query_user[0].role.name)

def check_password(password, hash) -> bool:
    '''Comprueba si la contraseña coincide con el hash de la base de datos'''
    return bcrypt.checkpw(str.encode(password), hash)

# ========== Obtención de datos ==========
def get_current_user(user_id: int) -> User:
    '''Retorna el usuario con el id ingresado.'''
    stmt = db.select(User).where(User.id == user_id)
    return db.session.execute(stmt).first()[0]
